function pullbackStreamlines(QS, x0, y0, t0, options)
% 
%   Create paths in pullback space (in pixels, XY)
%
% NPMitchell 2020

%% Default options
overwrite = false ;
preview = false ;
debug = false ;
pivimCoords = QS.pivimCoords ;
timePoints = QS.xp.fileMeta.timePoints ;
samplingResolution = '1x' ;

%% Unpack options
if isfield(options, 'overwrite')
    overwrite = options.overwrite ;
end
if isfield(options, 'preview')
    preview = options.preview ;
end
if isfield(options, 'debug')
    debug = options.debug ;
end
if isfield(options, 'timePoints')
    timePoints = options.timePoints ;
end
if isfield(options, 'pivimCoords')
    pivimCoords = options.pivimCoords ;
end
% Doesn't actually matter whether pullback is a single or double cover.
% if strcmp(pivimCoords(end-1), 'e')
%     doubleCovered = true ;
% else
%     doubleCovered = false ;
% end


%% Set it up
first = true ;
ntps = length(timePoints)-1;

%% First load raw PIV and store (uu, vv) values in a grid
% Load raw PIV for (uu, vv) in pix/dt
% Load the positions of the velocity vectors in pixels
disp('Loading raw PIV results')
piv = load(QS.fileName.pivRaw) ;
if debug
    % Debug this function: make fake PIV
    x0 = piv.x{1} ;
    y0 = piv.y{1} ;
    vPIV = zeros(ntps, size(x0, 1), size(x0, 2), 2);
    for ii = 1:ntps
        vPIV(ii, :, :, 1) = 100 * cos(2 * pi * ii / 20) + 5 ;
        vPIV(ii, :, :, 2) = 10 ;
    end
else
    % Load in true PIV
    for ii = 1:ntps
        uu = piv.u_filtered{ii} ;
        vv = piv.v_filtered{ii} ; 

        % Ensure no NaNs in uu and vv
        if any(isnan(uu(:))) || any(isnan(vv(:)))
           disp('inpainting NaNs in uu & vv')
           uu = inpaint_nans(uu) ;
           vv = inpaint_nans(vv) ;
        end

        % Build PIV velocity grid (time, ugrid(1), ugrid(2), x/y)
        if first
            vPIV = zeros(ntps, size(uu, 1), size(uu, 2), 2);
            xpiv = piv.x{ii} ;
            ypiv = piv.y{ii} ;
            first = false ;
        else
            % Ensure that evaluation gridpts are same throughout
            assert(all(all(xpiv == piv.x{ii}))) 
            assert(all(all(ypiv == piv.y{ii}))) 
        end
        vPIV(ii, :, :, 1) = uu ;             % in pix/dt
        vPIV(ii, :, :, 2) = vv ;             % in pix/dt
    end
end

% Placeholder image gives image size
% todo: allow dynamic image sizes
if pivimCoords
    im0 = imread(sprintf(QS.fullFileBase.im_sp_sme, t0)) ;
end

% Could use streamline but there is an issue with moving out of the
% frame. Instead use griddedInterpolant with padded edges, clip at each
% step along the way to keep in frame, and use periodic BC for vertical
% direction
% Preallocate positions for all time
XX = zeros(length(timePoints), size(x0, 1), size(x0, 2)) ;
YY = zeros(length(timePoints), size(y0, 1), size(y0, 2)) ;
% Fill in position at starting time t0
idx0 = QS.xp.tIdx(t0) ;
XX(idx0, :, :) = x0 ;
YY(idx0, :, :) = y0 ;

% Propagate forward first: tIdx(t0)+2 onward
for qq = (idx0+1):length(timePoints)
    % 1. Interpolate velocities at time qq-1
    uu = squeeze(vPIV(qq-1, :, :, 1)) ;
    vv = squeeze(vPIV(qq-1, :, :, 2)) ;
    ui = griddedInterpolant(x0', y0', uu', 'linear', 'nearest') ; % in transposed coords
    vi = griddedInterpolant(x0', y0', vv', 'linear', 'nearest') ; 

    % 2. Evaluate at XY(qq-1) non-transposed coords
    xx = XX(qq-1, :, :) ;
    yy = YY(qq-1, :, :) ;
    % assert(all(abs(xx(:)) > 0))
    dx = reshape(ui(xx(:), yy(:)), size(xx)) ;
    dy = reshape(vi(xx(:), yy(:)), size(yy)) ;

    % 3. push XY
    Xqq = xx + dx ;
    Yqq = yy + dy ;

    % 4. Clip at x=0,Lx and wrap at y=0,2Ly
    [Lx, Ly] = size(im0) ;
    [Xqq, Yqq] = QS.clipXY(Xqq, Yqq, Lx, Ly) ;
    XX(qq, :, :) = Xqq ;
    YY(qq, :, :) = Yqq ;

    if debug
        subplot(1, 2, 1)
        plot(qq, dx(1, 19, 19), 'b.')
        plot(qq, dy(1, 19, 19), 'r.')
        hold on;
        subplot(1, 2, 2) 
        plot(qq, XX(qq, 19, 19), 'b.')
        plot(qq, YY(qq, 19, 19), 'r.')
        hold on;

        %clf 
        %subplot(1, 2, 1)
        %imagesc(squeeze(dx))
        % caxis([0, 1])
        %title(['t = ' num2str(qq)])
        %colorbar()
        %pause(0.2)
    end
end

% Propagate backward in time if t0 > timePoints(2)
if idx0 > 1 
    backward_times = fliplr( 1:(idx0-1) ) ;
    for qq = backward_times 
        % 1. Interpolate velocities of time qq at their advected 
        %    locations in qq+1.
        %
        %   .---->*     .<----*
        %     qq=.       qq+1=*
        % 
        %    Since the advected x0+u_qq,y0+v_qq are unstructured, we
        %    interpolate current velocity at the advected positions,
        %    ie what velocities got you there, evaluate the velocities 
        %    that pushed to the next positions at the next positions,
        %    and pull back along those velocities.
        %
        uu = squeeze(vPIV(qq, :, :, 1)) ;
        vv = squeeze(vPIV(qq, :, :, 2)) ;        
        [xa, ya] = QS.clipXY(x0(:) + uu(:), y0(:) + vv(:), Lx, Ly) ;
        ui = scatteredInterpolant(xa, ya, uu(:), 'natural', 'nearest') ;
        vi = scatteredInterpolant(xa, ya, vv(:), 'natural', 'nearest') ;

        % 2. Evaluate at XY(qq+1) non-transposed coords 
        xx = XX(qq+1, :, :) ;
        yy = YY(qq+1, :, :) ;

        % 3. Pull XY back
        dx = reshape(ui(xx(:), yy(:)), size(xx)) ;
        dy = reshape(vi(xx(:), yy(:)), size(xx)) ;
        Xqq = xx - dx ;
        Yqq = yy - dy ;

        % 4. Clip at x=0,Lx and wrap at y=0,2Ly
        [Lx, Ly] = size(im0) ;
        [Xqq, Yqq] = QS.clipXY(Xqq, Yqq, Lx, Ly) ;
        XX(qq, :, :) = Xqq ;
        YY(qq, :, :) = Yqq ;
    end
end

%% Check debugged streamlines
if debug
    if preview
        for qq = 1:50:size(x0, 1)
            for pp = 1:50:size(x0, 2)
                plot3(1:length(timePoints), XX(:, qq, pp), YY(:, qq, pp), '-')
                hold on;
            end
        end
        xlabel('t')
        ylabel('X [pix]')
        zlabel('Y [pix]')
        title('Artificial flow for streamline checking')
    end
    view(2)
    saveas(gcf, fullfile(QS.dir.pivAvg, 'streamline_test_xt.png'))
    view(90, 90)    
    saveas(gcf, fullfile(QS.dir.pivAvg, 'streamline_test_yt.png'))
    view(90, 0)
    saveas(gcf, fullfile(QS.dir.pivAvg, 'streamline_test_xy.png'))
    waitfor(gcf)
end