function timeAverageVelocities(QS, options)
%measurePullbackStreamlines(QS, options)
%   Use pathlines of optical flow in pullback space to query velocities
%   and average along pathlines.
%
% Parameters
% ----------
% QS : QuapSlap class instance
% options : struct with fields 
%   overwrite : bool
%       overwrite previous results
%   preview : bool
%       view intermediate results
%
% NPMitchell 2020

%% Default options
overwrite = false ;
timePoints = QS.xp.fileMeta.timePoints ;

%% Determine sampling Resolution from input -- either nUxnV or (2*nU-1)x(2*nV-1)
if strcmp(samplingResolution, '1x') || strcmp(samplingResolution, 'single')
    doubleResolution = false ;
elseif strcmp(samplingResolution, '2x') || strcmp(samplingResolution, 'double')
    doubleResolution = true ;
else 
    error("Could not parse samplingResolution: set to '1x' or '2x'")
end

%% Unpack options
% Default values for options are to use sphi smoothed extended coords
% as PIV reference coord sys
pivimCoords = QS.piv.imCoords ;

if isfield(options, 'overwrite')
    overwrite = options.overwrite ;
end
if isfield(options, 'timePoints')
    timePoints = options.timePoints ;
end
if strcmp(pivimCoords(-1), 'e')
    doubleCovered = true ;
else
    doubleCovered = false ;
end

%% Unpack QS
pivDir = QS.dir.piv ;
piv3dfn = QS.fullFileBase.piv3d ;
ntps = length(timePoints) ;
% [rot, ~] = QS.getRotTrans() ;
% resolution = QS.APDV.resolution ; 
[~, ~, ~, xyzlim_APDV] = QS.getXYZLims() ;
axis_order = QS.data.axisOrder ;
blue = QS.plotting.colors(1, :) ;
red = QS.plotting.colors(2, :) ;
green = QS.plotting.colors(4, :) ;
t0 = QS.t0set() ;
timePoints = QS.xp.fileMeta.timePoints ;

%% Perform/Load simple averaging
disp('Performing/Loading simple averaging')
% Create directories
if doubleResolution
    fileNames = QS.fileName.pivAvg2x ;
else
    fileNames = QS.fileName.pivAvg ;
end

% Check if the time smoothed velocities exist already
% 2d velocities (pulled back), scaled by dilation of metric are v2dum 
% 2D velocities (pulled back) are v2d
% normal velocities on fieldfaces are vn
% 3d velocities on fieldfaces are v3d
% vertex-based velocities are vv
% face-based velocities are vf

QS.clearTime() ;

%% Build grids for averaging
if ~exist(fileNames.v2dum, 'file') || ~exist(fileNames.v2d, 'file') || ...
        exist(fileNames.vn, 'file') || ~exist(fileNames.v3d, 'file') || ...
        exist(fileNames.vf, 'file') || ~exist(fileNames.vv, 'file') || ...
        overwrite
    
    disp('Could not find time-smoothed velocities on disk')
    disp('Computing them...')
    
    % Load lagrangian pathlines
    QS.fileName.pathlines.XY
    
    
    ntps = length(timePoints)-1;
    
    %% Now load 3d piv and smooth in Lagrangian coords (along streamlines)
    first = true ; 
    for i = 1:ntps
        tp = timePoints(i) ;
        % dt = timePoints(i + 1) - tp ;
        
        disp(['Filling in velocity matrices, t=' num2str(tp)])
        QS.setTime(tp) ;
        if doubleResolution
            QS.getCurrentVelocity('piv3d2x') ;
            piv3d = QS.currentVelocity.piv3d2x ;
        else
            QS.getCurrentVelocity('piv3d') ;
            piv3d = QS.currentVelocity.piv3d ;
        end
        
        % Allocate memory if this is the first timestep. Assume all grids
        % are equally sized.
        if first
            vM = zeros(ntps, size(piv3d.v0_rs, 1), size(piv3d.v0_rs, 2));
            vfM = zeros(ntps, size(piv3d.v3dfaces, 1), size(piv3d.v3dfaces, 2)); 
            vvM = zeros(ntps, ...
                size(piv3d.v3dvertices, 1), ...
                size(piv3d.v3dvertices, 2)); 
            vnM = zeros(ntps, size(piv3d.v0n_rs, 1), size(piv3d.v0n_rs, 2));
            v2dM = zeros(ntps, size(piv3d.v0t2d, 1), size(piv3d.v0t2d, 2));
            v2dMum = zeros(ntps, size(piv3d.v0t2d, 1), size(piv3d.v0t2d, 2));
            first = false ;
        end
        
        % Assert no NaNs    
        try
            assert(~any(isnan(piv3d.v0_rs(:))))
            assert(~any(isnan(piv3d.v3dfaces_rs(:))))
            assert(~any(isnan(piv3d.v0n_rs(:))))
            assert(~any(isnan(piv3d.v0t2d(:))))
        catch
           % disp('inpainting NaNs in pt0 & pt1')
           error(['There are NaNs in the velocity data. Could use ', ...
               'inpaint_nans, but why/how are they there?'])
           % pt0 = inpaint_nans(pt0) ;
           % pt1 = inpaint_nans(pt1) ;
           close all
           figure ;
           scatter(piv3d.x0(:), piv3d.y0(:), 10, piv3d.v0_rs(:, 1))
           bad = find(isnan(piv3d.v0_rs(:, 1))) ;
           hold on; 
           xx1 = piv3d.x0(:) ;
           yy1 = piv3d.y0(:) ;
           scatter(xx1(bad), yy1(bad), 30, 'k')
        end
        
        %% For all pathlines, query velocity at this current time
        % Query velocities at eval coords, mesh vertices, mesh faces via 
        % interpolation. Also query vn, v2d (ie vt), and v2dum (vt/|g|). 
        
        % xa,ya are advected positions at this time
        
        % Interpolate velocities
        ui = scatteredInterpolant(xa, ya, uu(:), 'natural', 'nearest') ;
        vi = scatteredInterpolant(xa, ya, vv(:), 'natural', 'nearest') ;
        
        % Load streamline positions at this time
        sLXY = pathlines(tp, :, :, :)
        
        % First do v0_rs
        Fx = griddedInterpolant(x0', y0', piv3d.v0_rs(:, 1)', 'linear', 'nearest') ;
        Fy = griddedInterpolant(x0', y0', piv3d.v0_rs(:, 2)', 'linear', 'nearest') ;
        Fz = griddedInterpolant(x0', y0', piv3d.v0_rs(:, 3)', 'linear', 'nearest') ;
        % Query velocities
        v0_rs = [Fx(sLXY(:, 1), sLXY(:, 2)), ...
                 Fy(sLXY(:, 1), sLXY(:, 2)), Fz(bc(:, 1), bc(:, 2))] ;

        %% BUILD ARRAYS
        vM(i, :, :) = piv3d.v0_rs ;             % in um/dt rs
        vfM(i, :, :) = piv3d.v3dfaces_rs ;      % in um/dt rs
        vnM(i, :, :) = piv3d.v0n_rs ;           % in um/dt rs
        vvM(i, :, :) = QS.dx2APDV(piv3d.v3dvertices) ; % in um/min rs
        v2dM(i, :, :) = piv3d.v0t2d ;           % in pixels/ min
        v2dMum(i, :, 1) = piv3d.v0t2d(:, 1) ./ piv3d.dilation ; % in scaled pix/min, but proportional to um/min
        v2dMum(i, :, 2) = piv3d.v0t2d(:, 2) ./ piv3d.dilation ; % in scaled pix/min, but proportional to um/min
    end
    
    clearvars first 
    disp('built v0 matrix')
    
    %% Filter in time axis
    % linfilt = 0.1 * ones(10, 1, 1) ;
    % ellipsoid = fspecial3('ellipsoid', [5, 1, 1]) ;
    disp('Building tripulse filter equivalent to tripuls()')
    tripulse3 = [ 0.3333; 0.6666; 1; 0.6666; 0.3333];
    tripulse3 = tripulse3 ./ sum(tripulse3(:)) ;
    tripulse3 = reshape(tripulse3, [length(tripulse3), 1]) ;
    
    % Save the simpleminded averaging
    disp('Saving the time-smoothed velocities to disk')
    save(fileNames.v2dum, 'v2dMum') ;
    save(fileNames.v2dum, 'v2dMum') ;  % in scaled pix/min, proportional to um/min 
    save(fileNames.v2d, 'v2dM') ;      % in pix/min
    save(fileNames.vn, 'vnM') ;        % in um/min
    save(fileNames.v3d, 'vM') ;        % in um/min
    save(fileNames.vv, 'vvM') ;        % in um/min, rs
    save(fileNames.vf, 'vfM') ;        % in um/min, rs

end