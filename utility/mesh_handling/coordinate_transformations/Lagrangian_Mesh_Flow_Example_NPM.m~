%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Template pipeline for integrating strain rates along pathlines
% NPMitchell & DJCislo
% 
% Implemented in QuapSlap/measurePathlineStrainRate.m

%% ------------------------------------------------------------------------
% There are meshes for t=0 and t=1. On these meshes, strain rate tensors
% are defined on faces, then averaged onto vertices element-by-element.
% Additionally, forward-looking velocities are defined from PIV on a dense
% set of points (Xpiv,Ypiv). These pullback velocities were used
% in a previous step to build pathlines in pullback space (see below), as
% well as to compute strain rate tensors. 
% NOTE: PIV evaluation points (Xpiv,Ypiv) are constant in time.
%--------------------------------------------------------------------------

ntps = 2 ;
dt = 1;

% Create basic grid points in 2D
umax = 5 ; % The length of the domain (X)
vmax = 2 ; % The width of the domain (Y)
NL = 50; % The number of vertices along the length of the cylinder
NW = round( vmax * NL ./ umax); % The number of vertices along the width
[X, Y] = meshgrid( linspace(0, umax, NL), linspace(0, vmax, NW) );

% Triangulate grid points in 2D
TR = delaunayTriangulation([X(:), Y(:)]);

F = bfs_orient(TR.ConnectivityList);
X = TR.Points;

% The mesh at time 0
F0 = F;
V0 = X;

% The mesh at time 1
F1 = F;
V1 = X;

clearvars X Y F TR 

mesh0 = struct();
mesh0.u = V0 ; 
mesh0.f = F0 ;
mesh1 = struct();
mesh1.u = V1 ; 
mesh1.f = F1 ;
meshTri0 = triangulation(F0, V0) ;
meshTri1 = triangulation(F1, V1) ;

figure
subplot(1,2,1)
triplot(meshTri0);
axis equal
title('Mesh, t=0')

subplot(1,2,2)
triplot(meshTri1);
axis equal
title('Mesh, t=1')

% Build fake PIV data for both timepoints
% NOTE: Xpiv, Ypiv are the same for both timepoints.
[Xpiv, Ypiv] = meshgrid((1:100)/100 * umax, (1:100)/100 * vmax) ;
XYpiv = [Xpiv(:), Ypiv(:) ] ;
vPIV = zeros(ntps, size(Xpiv, 1), size(Xpiv, 2), 2);
for ii = 1:ntps
    vPIV(ii, :, :, 1) = cos(ii * pi) / umax ;   % u component
    vPIV(ii, :, :, 2) = cos(2 * Xpiv) / vmax ;       % v component
end

%% ------------------------------------------------------------------------
% Lagrangian pathlines built using PIV data intersect some subset of
% mesh0 faces at t=0 and a (possibly different) set of mesh1 faces at t=1.
% Let's call the Lagrangian pathline coordinates P0 and P1 for t=0 and
% t=1, respectively. Call the face locations for each time fieldfaces0 and
% fieldfaces1, respectively.
% I have versions of P that are based on advected 
% vertices from some timepoint tQ, and another version based on advected
% faces from tQ. Let's consider the one based on vertices here for the
% moment.
%--------------------------------------------------------------------------

numPoints = size(V0, 1);
kick = 0.5 * umax / NL ;

% The locations of material points at time 0
P0 = V0 + kick * (rand(numPoints, 2) - 0.5);

% The locations of material points at time 1
maxChange = 0.2 * kick;
P1 = P0 + maxChange .* rand(numPoints, 2);

% Visualize the meshes
clf
subplot(1,2,1)
triplot(triangulation(F0, V0));
hold on
scatter(P0(:,1), P0(:,2), 'filled', 'c');
quiver(P0(:,1), P0(:,2), (P1(:,1)-P0(:,1)), (P1(:,2)-P0(:,2)), ...
    0, 'c');
axis equal
title('Mesh, t=0')

subplot(1,2,2)
triplot(triangulation(F1, V1));
hold on
scatter(P1(:,1), P1(:,2), [], 'm', 's');
axis equal
title('Mesh, t=1')

%% ------------------------------------------------------------------------
% I also have the strain rate measurements for each mesh, mesh0 and mesh1,
% which were built by examining the push-forwarded velocities on the
% push-forward meshes. Call these strain rates strainRate0 and strainRate1.
% Given that t=0 is the first timepoint, I can assign the accumulated 
% strain at from t=[0, 1) as strain0 = strainRate0. 
% The goal is to find the strain for t=1 (strain1) from strain0 and
% strainRate0. 
% A forward Euler would say strain0 = 0 and
%                            strain1 = strain0 + strainRate0 * dt.
% Our backward Euler says strain0 = strainRate0 and
%                        strain1 = strain0 + strainRate1 * dt.
%--------------------------------------------------------------------------
bc = barycenter(V0, F0) ;

% Complicated strain option
% exx = 0.010 * cos(bc(:, 1) .* bc(:, 2)) ;
% exy = 0.005 * sin(bc(:, 1) .* bc(:, 2)) ;
% eyy = 0.020 * cos(0 * bc(:, 1)) ;

% Simple strain option
exx = 0.010 + 0 * bc(:, 1) ;
exy = 0.005 + 0 * bc(:, 1) ;
eyy = 0.020 + 0 * bc(:, 1) ;

% Store the first strain rate as a #faces x 4 array.
strainRate0 = [exx, exy, exy, eyy] ;
strainRate1 = [exx, exy, exy, eyy] ;

% "Integrate" the strain for the first timepoint by assigning from current
% rate values.
% Clip P0 to lie in the mesh in X, modulo in periodic dim Y
P0(:, 1) = max(P0(:, 1), 1e-13) ; 
P0(:, 1) = min(P0(:, 1), umax-1e-13) ; 
P0(:, 2) = mod(P0(:, 2), vmax) ; 
fieldfaces = pointLocation(meshTri0, P0) ;
strain0 = dt * strainRate0(fieldfaces, :) ;

%% ------------------------------------------------------------------------
% Now we want to update the strain on the pathlines, which now advect from 
% P0 to P1, to include the strainRate from t=1. 
% How do we do this? 

% If we want to define a transformation between the frame of time point 1
% and into the frame of time point 1 that ends up recapitulating the mesh
% at time point 1, we must ask "Where were the vertices of the mesh at time
% point 1 back during time point 0?".  We COULD extract this information
% using the motion of the material points, but it would be more accurate to
% use the PIV fields from which the material points were built.
% The PIV consists of velocities vPIV and evaluation positions (Xpiv,Ypiv).
%--------------------------------------------------------------------------

% qq is the previous timepoint
qq = 1 ;

% The 'inverse map' 
% 1. Interpolate velocities of time t=0 at their advected 
%    locations in t=1. 
%
%   .---->*     .<----*
%     qq=.       qq+1=*
% 
%    Since the advected x0+u_qq,y0+v_qq are spatially unstructured, we
%    interpolate t=0 velocity at the advected positions,
%    ie what velocities took XY0 to XY1, evaluate the velocities 
%    that pushed to the next positions AT the next positions XY1,
%    and pull back XY1 along those velocities to get displaced coordinates 
%    DXY0 which will land on XY1 when moved along t0's flow.
%
uu = squeeze(vPIV(qq, :, :, 1)) ;
vv = squeeze(vPIV(qq, :, :, 2)) ;

% Load Lx, Ly for t=1, which are the extents of the domain (needed for
% periodic boundary consitions and to keep all the points in the domain of
% interpolation). 
x01 = Xpiv(:) + uu(:) ;
y01 = Ypiv(:) + vv(:) ;
% [xa, ya] = QS.clipXY(xadvected, yadvected, Lx, Ly) ;
x01(x01 > umax) = umax ;
x01(x01 < 1e-13 ) = 1e-13 ;
y01(y01 > vmax) = y01(y01 > vmax) - vmax + 1e-13;
y01(y01 < 1e-13) = y01(y01 < 1e-13) + vmax ;

ui = scatteredInterpolant(x01, y01, uu(:), 'natural', 'nearest') ;
vi = scatteredInterpolant(x01, y01, vv(:), 'natural', 'nearest') ;

% 2. Evaluate at mesh1 vertices to pull them back along velocity to t=0.
dx = ui(mesh1.u(:, 1), mesh1.u(:, 2)) ;
dy = vi(mesh1.u(:, 1), mesh1.u(:, 2)) ;

% 3. Pull mesh vertices back to t=0
Xqq = mesh1.u(:, 1) - dx(:) ;
Yqq = mesh1.u(:, 2) - dy(:) ;

% The locations of the rectilinear vertices at time 0
% 'Deformed Vertices from t1 at t0'
DXY10 = [Xqq, Yqq ] ;

clf
scatter(x01(:), y01(:), 1, uu(:), 'filled');
hold on;
quiver(Xqq, Yqq, dx(:), dy(:), 0, 'c')
triplot(triangulation(F1, DXY10));
axis equal

%%
%--------------------------------------------------------------------------
% This 'Deformed Mesh' is the one that will end up at the rectilinear grid
% of time point 1 when it rides along the Lagrangian flow from time point 0
% to time point 1.  It is the transformation between THIS mesh and the
% rectilinear grid at time point 1 that should be used to calculate the
% forward transformation Jacobian
%--------------------------------------------------------------------------
J01 = jacobian2Dto2DMesh( V1, DXY10, F1 );


%% ------------------------------------------------------------------------
% Find which jacobians to use for each pathline point in mesh1
tri = triangulation(mesh1.f, mesh1.u) ;
umax = max(mesh1.u(:, 1)) ;
vmax = max(mesh1.u(:, 2)) ;
% Clip positions in X, modulo them in periodic Y
P1(:, 1) = max(P1(:, 1), 1e-13) ; 
P1(:, 1) = min(P1(:, 1), umax-1e-13) ; 
P1(:, 2) = mod(P1(:, 2), vmax) ; 
fieldfaces = pointLocation(tri, P1) ;

%% ------------------------------------------------------------------------
% Consider each pathline P0->P1, add the strainRate1 * dt to the
% accumulated strain from t0, which is called strain0. 
% Accumulate the strain via implicit Euler (backward Euler
% scheme)
% Transform as a (0,2)-tensor (NOTICE THE MATRIX INVERSES)
for qq = 1:size(fieldfaces,1)
    % reshape previously accumulated strain into 2x2 matrix
    strainf = [strain0(qq, 1), strain0(qq, 2); ...
               strain0(qq, 3), strain0(qq, 4)] ;

    % reshape strain rate into 2x2 matrix
    strainrate = [exx(qq), exy(qq); exy(qq), eyy(qq)] ;
    try
        J01f = J01{fieldfaces(qq)} ;
        strainM{qq} = inv(J01f) * strainf * (inv(J01f).') + ...
            dt * strainrate ;
    catch
        error('Ensure that all uv lie in the mesh.u')
    end
end
% Convert from cell (needed for face Jacobians) to array
for qq = 1:length(strainM)
    strain(qq, 1) = strainM{qq}(1, 1) ;
    strain(qq, 2) = strainM{qq}(1, 2) ;
    strain(qq, 3) = strainM{qq}(2, 1) ;
    strain(qq, 4) = strainM{qq}(2, 2) ; 
end

%% ------------------------------------------------------------------------
% Trace/Determinant of strain at t=1 
strain_tr = zeros(size(strain, 1), 1) ;
strain_dv = zeros(size(strain, 1), 1) ;
strain_theta = zeros(size(strain, 1), 1) ;
% Make a metric
gzz = ones(size(strain, 1), 1) ;
gzp = zeros(size(strain, 1), 1) ;
gpz = zeros(size(strain, 1), 1) ;
gpp = ones(size(strain, 1), 1) ;
for qq = 1:size(strain, 1)
    % reshape strain for this point into 2x2 matrix
    eq = [strain(qq, 1), strain(qq, 2); ...
          strain(qq, 3), strain(qq, 4)] ;
    
    % reshape metric into 2x2 matrix
    gq = [gzz(qq), gzp(qq); ...
          gpz(qq), gpp(qq)] ;

    % traceful component -- 1/2 Tr[g^{-1} gdot] = Tr[g^{-1} eps] 
    strain_tr(qq) = trace(inv(gq) * (eq)) ;
    % deviatoric component -- 
    % || epsilon - 1/2 Tr[g^{-1} epsilon] g|| = sqrt(Tr[A A^T]),
    % where A = epsilon - 1/2 Tr[g^{-1} epsilon] g.
    AA = eq - 0.5 * strain_tr(qq) * gq ;
    strain_dv(qq) = sqrt(trace(inv(gq) * (AA * (inv(gq) * AA)))) ;

    %% angle of elongation -- first take eigvectors 
    % Symmetrize g^{-1} AA ? No. Check eig(AA *inv(gq))?
    [evec_dev, evals_dev] = eig(inv(gq) * AA) ;
    % Check that eigenvalues are in order so we can get axis of positive
    % eigvalue (elongation axis)
    [evals_dev, idx] = sort(diag(evals_dev)) ;
    evec_dev = evec_dev(:, idx) ;
    pevec = evec_dev(:, end) ;
    strain_theta(qq) = atan2(pevec(2), pevec(1)) ;
end
% Axis elongation is a nematic, so clip angles to pi
strain_theta = mod(strain_theta, pi) ;


%% ------------------------------------------------------------------------
% Visualize the result
figure;
triplot(mesh1.f, mesh1.u(:, 1), mesh1.u(:, 2), 'k')
hold on;
scatter(P1(:, 1), P1(:, 2), 30, strain_theta, 'filled')
colorbar()
title('Deviatoric strain angle, \theta')

figure;
triplot(mesh1.f, mesh1.u(:, 1), mesh1.u(:, 2), 'k')
hold on;
scatter(P1(:, 1), P1(:, 2), 30, strain_dv, 'filled')
colorbar()
title('Deviatoric strain magnitude')

figure;
triplot(mesh1.f, mesh1.u(:, 1), mesh1.u(:, 2), 'k')
hold on;
scatter(P1(:, 1), P1(:, 2), 30, strain_tr, 'filled')
colorbar()
title('Dilitational strain magnitude')


%% We are done!