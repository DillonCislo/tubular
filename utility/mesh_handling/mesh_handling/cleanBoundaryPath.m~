function [cleantri] = cleanBoundaryPath(TRI, vertices, cutPath)
%CLEANBOUNDARYPATH(TRI, xy, cutPath) Prune boundary of triangulation 
%   Given triangulation, ensure that each boundary index specified in 
%   cutPath(ii) connects to no other points in cutPath other than 
%   cutPath(ii-1) and cutPath(ii+1).  
%   
% Parameters
% ----------
% TRI : M x 3 int array
%   The indices into vertices of each triangular face
% vertices : Q x D float array
%   The spatial positions of the mesh vertices
% cutPath : N x 1 int array
%   Indices into vertices for the path to prune
%
% Returns
% -------
% cleantri : (M - few) x 3 int array
%   The indices of vertices of each triangular face after pruning along
%   cutPath.
%
% NPMitchell 2019

NL = TRI2NL(TRI, vertices) ;
for ii = 1:length(cutPath)
    % check for connections with other boundary pts that 
    % are not cutPath(ii-1) or cutPath(ii+1)
    row = NL(cutPath(ii), :) ;
    % Are elements of row in cutPath up to ii-1 or after ii+1?
    totrim = [ cutPath(1:(ii-2)); cutPath((ii+2):end) ] ;
    totrim = find(ismember(row, totrim)) ;
    if length(totrim) > 1
        disp(['trimming bonds of cutPath point ' num2str(cutPath(ii))])
        NL(cutPath(ii), totrim) = 0 ;
    end
end

% Converting 
BL = NL2BL(NL) ;
cleantri = NL2TRI(NL, BL) ;

end

